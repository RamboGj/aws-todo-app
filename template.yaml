AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  todo-app

  Sample SAM Template for todo-app
  
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 900

Resources:
  TodosRamboTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      TableName: TodosRamboTable
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  TodoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: TodoUserPool
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false
      AutoVerifiedAttributes:
        - email
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
        
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
        UnusedAccountValidityDays: 7

  TodoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref TodoUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH

  TodosAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: TodosAPI
      StageName: Prod
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt "TodoUserPool.Arn"
      Cors:
        AllowMethods: "'GET,POST,PATCH,OPTIONS,DELETE'"
        AllowHeaders: "'content-type,authorization'"
        AllowOrigin: "'*'"
        AllowCredentials: "'*'"
      TracingEnabled: true
      MethodSettings:
        - HttpMethod: "*"
          ResourcePath: "/*"
          MetricsEnabled: true
          DataTraceEnabled: true

  GetTodoFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "ES2022"
        Sourcemap: true
        EntryPoints:
          - lambdas/todo/get-todo.ts
    Properties:
      FunctionName: GetTodoFunction
      CodeUri: app/src/
      Handler: lambdas/todo/get-todo.handler
      Runtime: nodejs18.x
      Description: Function used to get a todo
      Architectures:
        - arm64
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
              Resource:
                - !GetAtt TodosRamboTable.Arn
      Events:
        GetTodoEvent:
          Type: Api
          Properties:
            RestApiId: !Ref TodosAPI
            Path: /todos/{id}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  GetAllTodosFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "ES2022"
        Sourcemap: true
        EntryPoints:
          - lambdas/todo/get-todos.ts
    Properties:
      FunctionName: GetAllTodosFunction
      CodeUri: app/src/
      Handler: lambdas/todo/get-todos.handler
      Runtime: nodejs18.x
      Description: Function used to get all todos
      Architectures:
        - arm64
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Scan
              Resource:
                - !GetAtt TodosRamboTable.Arn
      Events:
        GetAllTodosEvent:
          Type: Api
          Properties:
            RestApiId: !Ref TodosAPI
            Path: /todos
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  CreateTodoFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "ES2022"
        Sourcemap: true
        EntryPoints:
          - lambdas/todo/post-todo.ts
    Properties:
      FunctionName: CreateTodoFunction
      CodeUri: app/src/
      Handler: lambdas/todo/post-todo.handler
      Runtime: nodejs18.x
      Description: Function used to create a todo
      Architectures:
        - arm64
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource:
                - !GetAtt TodosRamboTable.Arn
      Events:
        CreateTodoEvent:
          Type: Api
          Properties:
            RestApiId: !Ref TodosAPI
            Path: /todos
            Method: post  
            Auth:
              Authorizer: CognitoAuthorizer

  UpdateTodoFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "ES2022"
        Sourcemap: true
        EntryPoints:
          - lambdas/todo/update-todo.ts
    Properties:
      FunctionName: UpdateTodoFunction
      CodeUri: app/src/
      Handler: lambdas/todo/update-todo.handler
      Runtime: nodejs18.x
      Description: Function used to update a todo
      Architectures:
        - arm64
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
              Resource:
                - !GetAtt TodosRamboTable.Arn
      Events:
        UpdateTodoEvent:
          Type: Api
          Properties:
            RestApiId: !Ref TodosAPI
            Path: /todos/{id}
            Method: put
            Auth:
              Authorizer: CognitoAuthorizer

  DeleteTodoFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "ES2022"
        Sourcemap: true
        EntryPoints:
          - lambdas/todo/delete-todo.ts
    Properties:
      FunctionName: DeleteTodoFunction
      CodeUri: app/src/
      Handler: lambdas/todo/delete-todo.handler
      Runtime: nodejs18.x
      Description: Function used to delete a todo
      Architectures:
        - arm64
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:DeleteItem
              Resource:
                - !GetAtt TodosRamboTable.Arn
      Events:
        DeleteTodoEvent:
          Type: Api
          Properties:
            RestApiId: !Ref TodosAPI
            Path: /todos/{id}
            Method: delete 
            Auth:
              Authorizer: CognitoAuthorizer

  SignUpFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "ES2022"
        Sourcemap: true
        EntryPoints:
          - lambdas/auth/sign-up.ts
    Properties:
      FunctionName: SignUpFunction
      CodeUri: app/src/
      Handler: lambdas/auth/sign-up.handler
      Runtime: nodejs18.x
      Description: Function used to sign up on cognito
      Architectures:
        - arm64
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:SignUp
              Resource:
                - !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${TodoUserPool}"
      Events:
        GetTodoEvent:
          Type: Api
          Properties:
            RestApiId: !Ref TodosAPI
            Path: /auth/sign-up
            Method: post

  ConfirmSignUpFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "ES2022"
        Sourcemap: true
        EntryPoints:
          - lambdas/auth/confirm-sign-up.ts
    Properties:
      FunctionName: ConfirmSignUpFunction
      CodeUri: app/src/
      Handler: lambdas/auth/confirm-sign-up.handler
      Runtime: nodejs18.x
      Description: Function used to confirm user's sign up on cognito
      Architectures:
        - arm64
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:ConfirmSignUp
              Resource:
                - !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${TodoUserPool}"
      Events:
        GetTodoEvent:
          Type: Api
          Properties:
            RestApiId: !Ref TodosAPI
            Path: /auth/sign-up/confirm
            Method: post

  InitiateAuthFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "ES2022"
        Sourcemap: true
        EntryPoints:
          - lambdas/auth/initiate-auth.ts
    Properties:
      FunctionName: InitiateAuthFunction
      CodeUri: app/src/
      Handler: lambdas/auth/initiate-auth.handler
      Runtime: nodejs18.x
      Description: Function used to initiate auth flow on congnito
      Architectures:
        - arm64
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:InitiateAuth
              Resource:
                - !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${TodoUserPool}"
      Events:
        GetTodoEvent:
          Type: Api
          Properties:
            RestApiId: !Ref TodosAPI
            Path: /auth/initiate-auth
            Method: post

  RespondAuthChallenge:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "ES2022"
        Sourcemap: true
        EntryPoints:
          - lambdas/auth/respond-auth-challenge.ts
    Properties:
      FunctionName: RespondAuthChallenge
      CodeUri: app/src/
      Handler: lambdas/auth/respond-auth-challenge.handler
      Runtime: nodejs18.x
      Description: Function used to initiate auth flow on congnito
      Architectures:
        - arm64
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:RespondToAuthChallenge
              Resource:
                - !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${TodoUserPool}"
      Events:
        GetTodoEvent:
          Type: Api
          Properties:
            RestApiId: !Ref TodosAPI
            Path: /auth/respond-auth-challenge
            Method: post
            
Outputs:
  TodosApi:
    Description: "API Gateway endpoint URL for Prod stage for Todos function"
    Value: !Sub "https://${TodosAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/todos/"
